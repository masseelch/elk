{
  "info": {
    "title": "My Pets API",
    "description": "Awesome, Mega Cool API to manage Ariel's Pet Leopards!",
    "termsOfService": "",
    "contact": {},
    "license": {
      "name": ""
    },
    "version": "0.0.1"
  },
  "paths": {
    "/categories": {
      "get": {
        "summary": "List Categories",
        "description": "List Categories.",
        "tags": [
          "Category"
        ],
        "operationId": "listCategory",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Category list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CategoryView"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "summary": "Create a new Category",
        "description": "Creates a new Category and persists it to storage.",
        "tags": [
          "Category"
        ],
        "operationId": "createCategory",
        "requestBody": {
          "description": "Category to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "pets": {
                    "type": "array",
                    "items": {
                      "type": "integer",
                      "format": "int32"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Category created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryView"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/categories/{id}": {
      "get": {
        "summary": "Find a Category by ID",
        "description": "Finds the Category with the requested ID and returns it.",
        "tags": [
          "Category"
        ],
        "operationId": "readCategory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Category",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Category with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryView"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "summary": "Deletes a Category by ID",
        "description": "Deletes the Category with the requested ID.",
        "tags": [
          "Category"
        ],
        "operationId": "deleteCategory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Category to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Category with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "summary": "Updates a Category",
        "description": "Updates a Category and persists changes to storage.",
        "tags": [
          "Category"
        ],
        "operationId": "updateCategory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Category to update",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Category properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "pets": {
                    "type": "array",
                    "items": {
                      "type": "integer",
                      "format": "int32"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Category updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryView"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/categories/{id}/pets": {
      "get": {
        "summary": "Find the attached Pets",
        "description": "Find the attached Pets of the Category with the given ID",
        "tags": [
          "Category"
        ],
        "operationId": "listCategoryPets",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "ID of the Category",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Category",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Pets attached to Category with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PetWithPetListView"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/owners": {
      "get": {
        "summary": "List Owners",
        "description": "List Owners.",
        "tags": [
          "Owner"
        ],
        "operationId": "listOwner",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Owner list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OwnerView"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "summary": "Create a new Owner",
        "description": "Creates a new Owner and persists it to storage.",
        "tags": [
          "Owner"
        ],
        "operationId": "createOwner",
        "requestBody": {
          "description": "Owner to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "age",
                  "name"
                ],
                "properties": {
                  "age": {
                    "type": "integer",
                    "format": "int32"
                  },
                  "name": {
                    "type": "string"
                  },
                  "pets": {
                    "type": "array",
                    "items": {
                      "type": "integer",
                      "format": "int32"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Owner created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OwnerView"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/owners/{id}": {
      "get": {
        "summary": "Find a Owner by ID",
        "description": "Finds the Owner with the requested ID and returns it.",
        "tags": [
          "Owner"
        ],
        "operationId": "readOwner",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Owner",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Owner with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OwnerView"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "summary": "Deletes a Owner by ID",
        "description": "Deletes the Owner with the requested ID.",
        "tags": [
          "Owner"
        ],
        "operationId": "deleteOwner",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Owner to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Owner with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "summary": "Updates a Owner",
        "description": "Updates a Owner and persists changes to storage.",
        "tags": [
          "Owner"
        ],
        "operationId": "updateOwner",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Owner to update",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Owner properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "age",
                  "name"
                ],
                "properties": {
                  "age": {
                    "type": "integer",
                    "format": "int32"
                  },
                  "name": {
                    "type": "string"
                  },
                  "pets": {
                    "type": "array",
                    "items": {
                      "type": "integer",
                      "format": "int32"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Owner updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OwnerView"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/owners/{id}/pets": {
      "get": {
        "summary": "Find the attached Pets",
        "description": "Find the attached Pets of the Owner with the given ID",
        "tags": [
          "Owner"
        ],
        "operationId": "listOwnerPets",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "ID of the Owner",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Owner",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Pets attached to Owner with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PetWithPetListView"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/pets": {
      "get": {
        "summary": "List Pets",
        "description": "List Pets.",
        "tags": [
          "Pet"
        ],
        "operationId": "listPet",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Pet list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PetWithPetListView"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "apiKeySample": []
          }
        ]
      },
      "post": {
        "summary": "Create a new Pet",
        "description": "Creates a new Pet and persists it to storage.",
        "tags": [
          "Pet"
        ],
        "operationId": "createPet",
        "requestBody": {
          "description": "Pet to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "age": {
                    "type": "integer",
                    "format": "int32",
                    "example": 1
                  },
                  "categories": {
                    "type": "array",
                    "items": {
                      "type": "integer",
                      "format": "int32"
                    }
                  },
                  "friends": {
                    "type": "array",
                    "items": {
                      "type": "integer",
                      "format": "int32"
                    }
                  },
                  "name": {
                    "type": "string",
                    "example": "Kuro"
                  },
                  "owner": {
                    "type": "integer",
                    "format": "int32"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Pet created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PetWithFriendView"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "apiKeySample": []
          }
        ]
      }
    },
    "/pets/{id}": {
      "get": {
        "summary": "Find a Pet by ID",
        "description": "Finds the Pet with the requested ID and returns it.",
        "tags": [
          "Pet"
        ],
        "operationId": "readPet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Pet",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Pet with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PetWithFriendAndOwnerView"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "apiKeySample": []
          }
        ]
      },
      "delete": {
        "summary": "Deletes a Pet by ID",
        "description": "Deletes the Pet with the requested ID.",
        "tags": [
          "Pet"
        ],
        "operationId": "deletePet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Pet to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Pet with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "apiKeySample": []
          }
        ]
      },
      "patch": {
        "summary": "Updates a Pet",
        "description": "Updates a Pet and persists changes to storage.",
        "tags": [
          "Pet"
        ],
        "operationId": "updatePet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Pet to update",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Pet properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "age": {
                    "type": "integer",
                    "format": "int32",
                    "example": 1
                  },
                  "categories": {
                    "type": "array",
                    "items": {
                      "type": "integer",
                      "format": "int32"
                    }
                  },
                  "friends": {
                    "type": "array",
                    "items": {
                      "type": "integer",
                      "format": "int32"
                    }
                  },
                  "name": {
                    "type": "string",
                    "example": "Kuro"
                  },
                  "owner": {
                    "type": "integer",
                    "format": "int32"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Pet updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PetView"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "apiKeySample": []
          }
        ]
      }
    },
    "/pets/{id}/categories": {
      "get": {
        "summary": "Find the attached Categories",
        "description": "Find the attached Categories of the Pet with the given ID",
        "tags": [
          "Pet"
        ],
        "operationId": "listPetCategories",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "ID of the Pet",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Pet",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Categories attached to Pet with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CategoryView"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/pets/{id}/friends": {
      "get": {
        "summary": "Find the attached Pets",
        "description": "Find the attached Pets of the Pet with the given ID",
        "tags": [
          "Pet"
        ],
        "operationId": "listPetFriends",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "ID of the Pet",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Pet",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Pets attached to Pet with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PetWithPetListView"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/pets/{id}/owner": {
      "get": {
        "summary": "Find the attached Owner",
        "description": "Find the attached Owner of the Pet with the given ID",
        "tags": [
          "Pet"
        ],
        "operationId": "readPetOwner",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Pet",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Owner attached to Pet with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OwnerView"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "CategoryView": {
        "type": "object",
        "required": [
          "id",
          "name"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "OwnerView": {
        "type": "object",
        "required": [
          "age",
          "id",
          "name"
        ],
        "properties": {
          "age": {
            "type": "integer",
            "format": "int32"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "PetView": {
        "type": "object",
        "required": [
          "id",
          "name"
        ],
        "properties": {
          "age": {
            "type": "integer",
            "format": "int32",
            "example": 1
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "example": "Kuro"
          }
        }
      },
      "PetWithFriendAndOwnerView": {
        "type": "object",
        "required": [
          "id"
        ],
        "properties": {
          "age": {
            "type": "integer",
            "format": "int32",
            "example": 1
          },
          "friends": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PetWithFriendAndOwnerView"
            }
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "owner": {
            "$ref": "#/components/schemas/OwnerView"
          }
        }
      },
      "PetWithFriendView": {
        "type": "object",
        "required": [
          "id"
        ],
        "properties": {
          "age": {
            "type": "integer",
            "format": "int32",
            "example": 1
          },
          "friends": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PetWithFriendView"
            }
          },
          "id": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "PetWithPetListView": {
        "type": "object",
        "required": [
          "id"
        ],
        "properties": {
          "age": {
            "type": "integer",
            "format": "int32",
            "example": 1
          },
          "categories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CategoryView"
            }
          },
          "id": {
            "type": "integer",
            "format": "int32"
          }
        }
      }
    },
    "responses": {
      "400": {
        "description": "invalid input, data invalid",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "format": "int32",
                  "example": 400
                },
                "errors": {
                  "type": "object",
                  "properties": {}
                },
                "status": {
                  "type": "string",
                  "example": "Bad Request"
                }
              }
            }
          }
        }
      },
      "403": {
        "description": "user misses permission",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "format": "int32",
                  "example": 403
                },
                "errors": {
                  "type": "object",
                  "properties": {}
                },
                "status": {
                  "type": "string",
                  "example": "Forbidden"
                }
              }
            }
          }
        }
      },
      "404": {
        "description": "resource not found",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "format": "int32",
                  "example": 404
                },
                "errors": {
                  "type": "object",
                  "properties": {}
                },
                "status": {
                  "type": "string",
                  "example": "Not Found"
                }
              }
            }
          }
        }
      },
      "409": {
        "description": "conflicting resources",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "format": "int32",
                  "example": 409
                },
                "errors": {
                  "type": "object",
                  "properties": {}
                },
                "status": {
                  "type": "string",
                  "example": "Conflict"
                }
              }
            }
          }
        }
      },
      "500": {
        "description": "unexpected error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "format": "int32",
                  "example": 500
                },
                "errors": {
                  "type": "object",
                  "properties": {}
                },
                "status": {
                  "type": "string",
                  "example": "Internal Server Error"
                }
              }
            }
          }
        }
      }
    },
    "parameters": {},
    "securitySchemes": {
      "apiKeySample": {
        "type": "apiKey",
        "name": "X-API-KEY",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "apiKeySample": []
    }
  ],
  "openapi": "3.0.3"
}