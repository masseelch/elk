// Code generated by entc, DO NOT EDIT.

package http

import (
	"net/http"
	"strconv"

	"github.com/google/uuid"
	"github.com/mailru/easyjson"
	"github.com/masseelch/elk/internal/simple/ent"
	collar "github.com/masseelch/elk/internal/simple/ent/collar"
)

// Basic HTTP Error Response
type ErrResponse struct {
	Code   int         `json:"code"`             // http response status code
	Status string      `json:"status"`           // user-level status message
	Errors interface{} `json:"errors,omitempty"` // application-level error
}

func (e ErrResponse) MarshalToHTTPResponseWriter(w http.ResponseWriter) (int, error) {
	d, err := easyjson.Marshal(e)
	if err != nil {
		return 0, err
	}
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.Header().Set("Content-Length", strconv.Itoa(len(d)))
	w.WriteHeader(e.Code)
	return w.Write(d)
}

func BadRequest(w http.ResponseWriter, msg interface{}) (int, error) {
	return ErrResponse{
		Code:   http.StatusBadRequest,
		Status: http.StatusText(http.StatusBadRequest),
		Errors: msg,
	}.MarshalToHTTPResponseWriter(w)
}

func Conflict(w http.ResponseWriter, msg interface{}) (int, error) {
	return ErrResponse{
		Code:   http.StatusConflict,
		Status: http.StatusText(http.StatusConflict),
		Errors: msg,
	}.MarshalToHTTPResponseWriter(w)
}

func Forbidden(w http.ResponseWriter, msg interface{}) (int, error) {
	return ErrResponse{
		Code:   http.StatusForbidden,
		Status: http.StatusText(http.StatusForbidden),
		Errors: msg,
	}.MarshalToHTTPResponseWriter(w)
}

func InternalServerError(w http.ResponseWriter, msg interface{}) (int, error) {
	return ErrResponse{
		Code:   http.StatusInternalServerError,
		Status: http.StatusText(http.StatusInternalServerError),
		Errors: msg,
	}.MarshalToHTTPResponseWriter(w)
}

func NotFound(w http.ResponseWriter, msg interface{}) (int, error) {
	return ErrResponse{
		Code:   http.StatusNotFound,
		Status: http.StatusText(http.StatusNotFound),
		Errors: msg,
	}.MarshalToHTTPResponseWriter(w)
}

func Unauthorized(w http.ResponseWriter, msg interface{}) (int, error) {
	return ErrResponse{
		Code:   http.StatusUnauthorized,
		Status: http.StatusText(http.StatusUnauthorized),
		Errors: msg,
	}.MarshalToHTTPResponseWriter(w)
}

type (
	// CategoryView represents the data serialized for the following serialization group combinations:
	// []
	// [owner pet pet:owner]
	CategoryView struct {
		ID   uint64 `json:"id,omitempty"`
		Name string `json:"name,omitempty"`
	}
	CategoryViews []*CategoryView
)

func NewCategoryView(e *ent.Category) *CategoryView {
	if e == nil {
		return nil
	}
	return &CategoryView{
		ID:   e.ID,
		Name: e.Name,
	}
}

func NewCategoryViews(es []*ent.Category) CategoryViews {
	if len(es) == 0 {
		return nil
	}
	r := make(CategoryViews, len(es))
	for i, e := range es {
		r[i] = NewCategoryView(e)
	}
	return r
}

type (
	// CollarView represents the data serialized for the following serialization group combinations:
	// []
	// [owner pet pet:owner]
	CollarView struct {
		ID    int          `json:"id,omitempty"`
		Color collar.Color `json:"color,omitempty"`
	}
	CollarViews []*CollarView
)

func NewCollarView(e *ent.Collar) *CollarView {
	if e == nil {
		return nil
	}
	return &CollarView{
		ID:    e.ID,
		Color: e.Color,
	}
}

func NewCollarViews(es []*ent.Collar) CollarViews {
	if len(es) == 0 {
		return nil
	}
	r := make(CollarViews, len(es))
	for i, e := range es {
		r[i] = NewCollarView(e)
	}
	return r
}

type (
	// OwnerView represents the data serialized for the following serialization group combinations:
	// []
	// [owner pet pet:owner]
	OwnerView struct {
		ID   uuid.UUID `json:"id,omitempty"`
		Name string    `json:"name,omitempty"`
		Age  int       `json:"age,omitempty"`
	}
	OwnerViews []*OwnerView
)

func NewOwnerView(e *ent.Owner) *OwnerView {
	if e == nil {
		return nil
	}
	return &OwnerView{
		ID:   e.ID,
		Name: e.Name,
		Age:  e.Age,
	}
}

func NewOwnerViews(es []*ent.Owner) OwnerViews {
	if len(es) == 0 {
		return nil
	}
	r := make(OwnerViews, len(es))
	for i, e := range es {
		r[i] = NewOwnerView(e)
	}
	return r
}

type (
	// PetView represents the data serialized for the following serialization group combinations:
	// []
	// [owner pet pet:owner]
	PetView struct {
		ID   string `json:"id,omitempty"`
		Name string `json:"name,omitempty"`
		Age  int    `json:"age,omitempty"`
	}
	PetViews []*PetView
)

func NewPetView(e *ent.Pet) *PetView {
	if e == nil {
		return nil
	}
	return &PetView{
		ID:   e.ID,
		Name: e.Name,
		Age:  e.Age,
	}
}

func NewPetViews(es []*ent.Pet) PetViews {
	if len(es) == 0 {
		return nil
	}
	r := make(PetViews, len(es))
	for i, e := range es {
		r[i] = NewPetView(e)
	}
	return r
}
