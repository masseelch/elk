// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/masseelch/elk/internal/unit/pets/ent/owner"
)

// Owner is the model entity for the Owner schema.
type Owner struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Age holds the value of the "age" field.
	Age int `json:"age,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OwnerQuery when eager-loading is set.
	Edges OwnerEdges `json:"edges"`
}

// OwnerEdges holds the relations/edges for other nodes in the graph.
type OwnerEdges struct {
	// Pets holds the value of the pets edge.
	Pets []*Pet `json:"pets,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// PetsOrErr returns the Pets value or an error if the edge
// was not loaded in eager-loading.
func (e OwnerEdges) PetsOrErr() ([]*Pet, error) {
	if e.loadedTypes[0] {
		return e.Pets, nil
	}
	return nil, &NotLoadedError{edge: "pets"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Owner) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case owner.FieldID, owner.FieldAge:
			values[i] = new(sql.NullInt64)
		case owner.FieldName:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Owner", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Owner fields.
func (o *Owner) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case owner.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			o.ID = int(value.Int64)
		case owner.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				o.Name = value.String
			}
		case owner.FieldAge:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field age", values[i])
			} else if value.Valid {
				o.Age = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryPets queries the "pets" edge of the Owner entity.
func (o *Owner) QueryPets() *PetQuery {
	return (&OwnerClient{config: o.config}).QueryPets(o)
}

// Update returns a builder for updating this Owner.
// Note that you need to call Owner.Unwrap() before calling this method if this Owner
// was returned from a transaction, and the transaction was committed or rolled back.
func (o *Owner) Update() *OwnerUpdateOne {
	return (&OwnerClient{config: o.config}).UpdateOne(o)
}

// Unwrap unwraps the Owner entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (o *Owner) Unwrap() *Owner {
	tx, ok := o.config.driver.(*txDriver)
	if !ok {
		panic("ent: Owner is not a transactional entity")
	}
	o.config.driver = tx.drv
	return o
}

// String implements the fmt.Stringer.
func (o *Owner) String() string {
	var builder strings.Builder
	builder.WriteString("Owner(")
	builder.WriteString(fmt.Sprintf("id=%v", o.ID))
	builder.WriteString(", name=")
	builder.WriteString(o.Name)
	builder.WriteString(", age=")
	builder.WriteString(fmt.Sprintf("%v", o.Age))
	builder.WriteByte(')')
	return builder.String()
}

// Owners is a parsable slice of Owner.
type Owners []*Owner

func (o Owners) config(cfg config) {
	for _i := range o {
		o[_i].config = cfg
	}
}
