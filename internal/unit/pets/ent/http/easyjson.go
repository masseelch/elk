// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package http

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonC5a4559bDecodeGithubComMasseelchElkInternalUnitPetsEntHttp(in *jlexer.Lexer, out *PetUpdateRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			if in.IsNull() {
				in.Skip()
				out.Name = nil
			} else {
				if out.Name == nil {
					out.Name = new(string)
				}
				*out.Name = string(in.String())
			}
		case "age":
			if in.IsNull() {
				in.Skip()
				out.Age = nil
			} else {
				if out.Age == nil {
					out.Age = new(int)
				}
				*out.Age = int(in.Int())
			}
		case "category":
			if in.IsNull() {
				in.Skip()
				out.Category = nil
			} else {
				in.Delim('[')
				if out.Category == nil {
					if !in.IsDelim(']') {
						out.Category = make([]int, 0, 8)
					} else {
						out.Category = []int{}
					}
				} else {
					out.Category = (out.Category)[:0]
				}
				for !in.IsDelim(']') {
					var v1 int
					v1 = int(in.Int())
					out.Category = append(out.Category, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "owner":
			if in.IsNull() {
				in.Skip()
				out.Owner = nil
			} else {
				if out.Owner == nil {
					out.Owner = new(int)
				}
				*out.Owner = int(in.Int())
			}
		case "friends":
			if in.IsNull() {
				in.Skip()
				out.Friends = nil
			} else {
				in.Delim('[')
				if out.Friends == nil {
					if !in.IsDelim(']') {
						out.Friends = make([]int, 0, 8)
					} else {
						out.Friends = []int{}
					}
				} else {
					out.Friends = (out.Friends)[:0]
				}
				for !in.IsDelim(']') {
					var v2 int
					v2 = int(in.Int())
					out.Friends = append(out.Friends, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComMasseelchElkInternalUnitPetsEntHttp(out *jwriter.Writer, in PetUpdateRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		if in.Name == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Name))
		}
	}
	{
		const prefix string = ",\"age\":"
		out.RawString(prefix)
		if in.Age == nil {
			out.RawString("null")
		} else {
			out.Int(int(*in.Age))
		}
	}
	{
		const prefix string = ",\"category\":"
		out.RawString(prefix)
		if in.Category == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v3, v4 := range in.Category {
				if v3 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v4))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"owner\":"
		out.RawString(prefix)
		if in.Owner == nil {
			out.RawString("null")
		} else {
			out.Int(int(*in.Owner))
		}
	}
	{
		const prefix string = ",\"friends\":"
		out.RawString(prefix)
		if in.Friends == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Friends {
				if v5 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v6))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PetUpdateRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComMasseelchElkInternalUnitPetsEntHttp(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PetUpdateRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComMasseelchElkInternalUnitPetsEntHttp(l, v)
}
func easyjsonC5a4559bDecodeGithubComMasseelchElkInternalUnitPetsEntHttp1(in *jlexer.Lexer, out *PetCreateRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			if in.IsNull() {
				in.Skip()
				out.Name = nil
			} else {
				if out.Name == nil {
					out.Name = new(string)
				}
				*out.Name = string(in.String())
			}
		case "age":
			if in.IsNull() {
				in.Skip()
				out.Age = nil
			} else {
				if out.Age == nil {
					out.Age = new(int)
				}
				*out.Age = int(in.Int())
			}
		case "category":
			if in.IsNull() {
				in.Skip()
				out.Category = nil
			} else {
				in.Delim('[')
				if out.Category == nil {
					if !in.IsDelim(']') {
						out.Category = make([]int, 0, 8)
					} else {
						out.Category = []int{}
					}
				} else {
					out.Category = (out.Category)[:0]
				}
				for !in.IsDelim(']') {
					var v7 int
					v7 = int(in.Int())
					out.Category = append(out.Category, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "owner":
			if in.IsNull() {
				in.Skip()
				out.Owner = nil
			} else {
				if out.Owner == nil {
					out.Owner = new(int)
				}
				*out.Owner = int(in.Int())
			}
		case "friends":
			if in.IsNull() {
				in.Skip()
				out.Friends = nil
			} else {
				in.Delim('[')
				if out.Friends == nil {
					if !in.IsDelim(']') {
						out.Friends = make([]int, 0, 8)
					} else {
						out.Friends = []int{}
					}
				} else {
					out.Friends = (out.Friends)[:0]
				}
				for !in.IsDelim(']') {
					var v8 int
					v8 = int(in.Int())
					out.Friends = append(out.Friends, v8)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComMasseelchElkInternalUnitPetsEntHttp1(out *jwriter.Writer, in PetCreateRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		if in.Name == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Name))
		}
	}
	{
		const prefix string = ",\"age\":"
		out.RawString(prefix)
		if in.Age == nil {
			out.RawString("null")
		} else {
			out.Int(int(*in.Age))
		}
	}
	{
		const prefix string = ",\"category\":"
		out.RawString(prefix)
		if in.Category == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v9, v10 := range in.Category {
				if v9 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v10))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"owner\":"
		out.RawString(prefix)
		if in.Owner == nil {
			out.RawString("null")
		} else {
			out.Int(int(*in.Owner))
		}
	}
	{
		const prefix string = ",\"friends\":"
		out.RawString(prefix)
		if in.Friends == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v11, v12 := range in.Friends {
				if v11 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v12))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PetCreateRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComMasseelchElkInternalUnitPetsEntHttp1(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PetCreateRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComMasseelchElkInternalUnitPetsEntHttp1(l, v)
}
func easyjsonC5a4559bDecodeGithubComMasseelchElkInternalUnitPetsEntHttp2(in *jlexer.Lexer, out *Pet3946546131Views) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(Pet3946546131Views, 0, 8)
			} else {
				*out = Pet3946546131Views{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v13 *Pet3946546131View
			if in.IsNull() {
				in.Skip()
				v13 = nil
			} else {
				if v13 == nil {
					v13 = new(Pet3946546131View)
				}
				(*v13).UnmarshalEasyJSON(in)
			}
			*out = append(*out, v13)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComMasseelchElkInternalUnitPetsEntHttp2(out *jwriter.Writer, in Pet3946546131Views) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v14, v15 := range in {
			if v14 > 0 {
				out.RawByte(',')
			}
			if v15 == nil {
				out.RawString("null")
			} else {
				(*v15).MarshalEasyJSON(out)
			}
		}
		out.RawByte(']')
	}
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Pet3946546131Views) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComMasseelchElkInternalUnitPetsEntHttp2(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Pet3946546131Views) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComMasseelchElkInternalUnitPetsEntHttp2(l, v)
}
func easyjsonC5a4559bDecodeGithubComMasseelchElkInternalUnitPetsEntHttp3(in *jlexer.Lexer, out *Pet3946546131View) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "name":
			out.Name = string(in.String())
		case "age":
			out.Age = int(in.Int())
		case "owner":
			if in.IsNull() {
				in.Skip()
				out.Owner = nil
			} else {
				if out.Owner == nil {
					out.Owner = new(Owner139708381View)
				}
				(*out.Owner).UnmarshalEasyJSON(in)
			}
		case "friends":
			(out.Friends).UnmarshalEasyJSON(in)
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComMasseelchElkInternalUnitPetsEntHttp3(out *jwriter.Writer, in Pet3946546131View) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.Age != 0 {
		const prefix string = ",\"age\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Age))
	}
	if in.Owner != nil {
		const prefix string = ",\"owner\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Owner).MarshalEasyJSON(out)
	}
	if len(in.Friends) != 0 {
		const prefix string = ",\"friends\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Friends).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Pet3946546131View) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComMasseelchElkInternalUnitPetsEntHttp3(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Pet3946546131View) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComMasseelchElkInternalUnitPetsEntHttp3(l, v)
}
func easyjsonC5a4559bDecodeGithubComMasseelchElkInternalUnitPetsEntHttp4(in *jlexer.Lexer, out *Pet359800019Views) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(Pet359800019Views, 0, 8)
			} else {
				*out = Pet359800019Views{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v16 *Pet359800019View
			if in.IsNull() {
				in.Skip()
				v16 = nil
			} else {
				if v16 == nil {
					v16 = new(Pet359800019View)
				}
				(*v16).UnmarshalEasyJSON(in)
			}
			*out = append(*out, v16)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComMasseelchElkInternalUnitPetsEntHttp4(out *jwriter.Writer, in Pet359800019Views) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v17, v18 := range in {
			if v17 > 0 {
				out.RawByte(',')
			}
			if v18 == nil {
				out.RawString("null")
			} else {
				(*v18).MarshalEasyJSON(out)
			}
		}
		out.RawByte(']')
	}
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Pet359800019Views) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComMasseelchElkInternalUnitPetsEntHttp4(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Pet359800019Views) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComMasseelchElkInternalUnitPetsEntHttp4(l, v)
}
func easyjsonC5a4559bDecodeGithubComMasseelchElkInternalUnitPetsEntHttp5(in *jlexer.Lexer, out *Pet359800019View) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "name":
			out.Name = string(in.String())
		case "age":
			out.Age = int(in.Int())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComMasseelchElkInternalUnitPetsEntHttp5(out *jwriter.Writer, in Pet359800019View) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.Age != 0 {
		const prefix string = ",\"age\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Age))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Pet359800019View) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComMasseelchElkInternalUnitPetsEntHttp5(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Pet359800019View) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComMasseelchElkInternalUnitPetsEntHttp5(l, v)
}
func easyjsonC5a4559bDecodeGithubComMasseelchElkInternalUnitPetsEntHttp6(in *jlexer.Lexer, out *OwnerUpdateRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			if in.IsNull() {
				in.Skip()
				out.Name = nil
			} else {
				if out.Name == nil {
					out.Name = new(string)
				}
				*out.Name = string(in.String())
			}
		case "age":
			if in.IsNull() {
				in.Skip()
				out.Age = nil
			} else {
				if out.Age == nil {
					out.Age = new(int)
				}
				*out.Age = int(in.Int())
			}
		case "pets":
			if in.IsNull() {
				in.Skip()
				out.Pets = nil
			} else {
				in.Delim('[')
				if out.Pets == nil {
					if !in.IsDelim(']') {
						out.Pets = make([]int, 0, 8)
					} else {
						out.Pets = []int{}
					}
				} else {
					out.Pets = (out.Pets)[:0]
				}
				for !in.IsDelim(']') {
					var v19 int
					v19 = int(in.Int())
					out.Pets = append(out.Pets, v19)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComMasseelchElkInternalUnitPetsEntHttp6(out *jwriter.Writer, in OwnerUpdateRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		if in.Name == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Name))
		}
	}
	{
		const prefix string = ",\"age\":"
		out.RawString(prefix)
		if in.Age == nil {
			out.RawString("null")
		} else {
			out.Int(int(*in.Age))
		}
	}
	{
		const prefix string = ",\"pets\":"
		out.RawString(prefix)
		if in.Pets == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v20, v21 := range in.Pets {
				if v20 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v21))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OwnerUpdateRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComMasseelchElkInternalUnitPetsEntHttp6(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OwnerUpdateRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComMasseelchElkInternalUnitPetsEntHttp6(l, v)
}
func easyjsonC5a4559bDecodeGithubComMasseelchElkInternalUnitPetsEntHttp7(in *jlexer.Lexer, out *OwnerCreateRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			if in.IsNull() {
				in.Skip()
				out.Name = nil
			} else {
				if out.Name == nil {
					out.Name = new(string)
				}
				*out.Name = string(in.String())
			}
		case "age":
			if in.IsNull() {
				in.Skip()
				out.Age = nil
			} else {
				if out.Age == nil {
					out.Age = new(int)
				}
				*out.Age = int(in.Int())
			}
		case "pets":
			if in.IsNull() {
				in.Skip()
				out.Pets = nil
			} else {
				in.Delim('[')
				if out.Pets == nil {
					if !in.IsDelim(']') {
						out.Pets = make([]int, 0, 8)
					} else {
						out.Pets = []int{}
					}
				} else {
					out.Pets = (out.Pets)[:0]
				}
				for !in.IsDelim(']') {
					var v22 int
					v22 = int(in.Int())
					out.Pets = append(out.Pets, v22)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComMasseelchElkInternalUnitPetsEntHttp7(out *jwriter.Writer, in OwnerCreateRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		if in.Name == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Name))
		}
	}
	{
		const prefix string = ",\"age\":"
		out.RawString(prefix)
		if in.Age == nil {
			out.RawString("null")
		} else {
			out.Int(int(*in.Age))
		}
	}
	{
		const prefix string = ",\"pets\":"
		out.RawString(prefix)
		if in.Pets == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v23, v24 := range in.Pets {
				if v23 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v24))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OwnerCreateRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComMasseelchElkInternalUnitPetsEntHttp7(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OwnerCreateRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComMasseelchElkInternalUnitPetsEntHttp7(l, v)
}
func easyjsonC5a4559bDecodeGithubComMasseelchElkInternalUnitPetsEntHttp8(in *jlexer.Lexer, out *Owner139708381Views) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(Owner139708381Views, 0, 8)
			} else {
				*out = Owner139708381Views{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v25 *Owner139708381View
			if in.IsNull() {
				in.Skip()
				v25 = nil
			} else {
				if v25 == nil {
					v25 = new(Owner139708381View)
				}
				(*v25).UnmarshalEasyJSON(in)
			}
			*out = append(*out, v25)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComMasseelchElkInternalUnitPetsEntHttp8(out *jwriter.Writer, in Owner139708381Views) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v26, v27 := range in {
			if v26 > 0 {
				out.RawByte(',')
			}
			if v27 == nil {
				out.RawString("null")
			} else {
				(*v27).MarshalEasyJSON(out)
			}
		}
		out.RawByte(']')
	}
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Owner139708381Views) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComMasseelchElkInternalUnitPetsEntHttp8(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Owner139708381Views) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComMasseelchElkInternalUnitPetsEntHttp8(l, v)
}
func easyjsonC5a4559bDecodeGithubComMasseelchElkInternalUnitPetsEntHttp9(in *jlexer.Lexer, out *Owner139708381View) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "name":
			out.Name = string(in.String())
		case "age":
			out.Age = int(in.Int())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComMasseelchElkInternalUnitPetsEntHttp9(out *jwriter.Writer, in Owner139708381View) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.Age != 0 {
		const prefix string = ",\"age\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Age))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Owner139708381View) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComMasseelchElkInternalUnitPetsEntHttp9(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Owner139708381View) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComMasseelchElkInternalUnitPetsEntHttp9(l, v)
}
func easyjsonC5a4559bDecodeGithubComMasseelchElkInternalUnitPetsEntHttp10(in *jlexer.Lexer, out *ErrResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "code":
			out.Code = int(in.Int())
		case "status":
			out.Status = string(in.String())
		case "errors":
			if m, ok := out.Errors.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Errors.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Errors = in.Interface()
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComMasseelchElkInternalUnitPetsEntHttp10(out *jwriter.Writer, in ErrResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"code\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Code))
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.String(string(in.Status))
	}
	if in.Errors != nil {
		const prefix string = ",\"errors\":"
		out.RawString(prefix)
		if m, ok := in.Errors.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Errors.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Errors))
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ErrResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComMasseelchElkInternalUnitPetsEntHttp10(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ErrResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComMasseelchElkInternalUnitPetsEntHttp10(l, v)
}
func easyjsonC5a4559bDecodeGithubComMasseelchElkInternalUnitPetsEntHttp11(in *jlexer.Lexer, out *CategoryUpdateRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			if in.IsNull() {
				in.Skip()
				out.Name = nil
			} else {
				if out.Name == nil {
					out.Name = new(string)
				}
				*out.Name = string(in.String())
			}
		case "pets":
			if in.IsNull() {
				in.Skip()
				out.Pets = nil
			} else {
				in.Delim('[')
				if out.Pets == nil {
					if !in.IsDelim(']') {
						out.Pets = make([]int, 0, 8)
					} else {
						out.Pets = []int{}
					}
				} else {
					out.Pets = (out.Pets)[:0]
				}
				for !in.IsDelim(']') {
					var v28 int
					v28 = int(in.Int())
					out.Pets = append(out.Pets, v28)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComMasseelchElkInternalUnitPetsEntHttp11(out *jwriter.Writer, in CategoryUpdateRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		if in.Name == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Name))
		}
	}
	{
		const prefix string = ",\"pets\":"
		out.RawString(prefix)
		if in.Pets == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v29, v30 := range in.Pets {
				if v29 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v30))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CategoryUpdateRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComMasseelchElkInternalUnitPetsEntHttp11(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CategoryUpdateRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComMasseelchElkInternalUnitPetsEntHttp11(l, v)
}
func easyjsonC5a4559bDecodeGithubComMasseelchElkInternalUnitPetsEntHttp12(in *jlexer.Lexer, out *CategoryCreateRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			if in.IsNull() {
				in.Skip()
				out.Name = nil
			} else {
				if out.Name == nil {
					out.Name = new(string)
				}
				*out.Name = string(in.String())
			}
		case "pets":
			if in.IsNull() {
				in.Skip()
				out.Pets = nil
			} else {
				in.Delim('[')
				if out.Pets == nil {
					if !in.IsDelim(']') {
						out.Pets = make([]int, 0, 8)
					} else {
						out.Pets = []int{}
					}
				} else {
					out.Pets = (out.Pets)[:0]
				}
				for !in.IsDelim(']') {
					var v31 int
					v31 = int(in.Int())
					out.Pets = append(out.Pets, v31)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComMasseelchElkInternalUnitPetsEntHttp12(out *jwriter.Writer, in CategoryCreateRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		if in.Name == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Name))
		}
	}
	{
		const prefix string = ",\"pets\":"
		out.RawString(prefix)
		if in.Pets == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v32, v33 := range in.Pets {
				if v32 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v33))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CategoryCreateRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComMasseelchElkInternalUnitPetsEntHttp12(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CategoryCreateRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComMasseelchElkInternalUnitPetsEntHttp12(l, v)
}
func easyjsonC5a4559bDecodeGithubComMasseelchElkInternalUnitPetsEntHttp13(in *jlexer.Lexer, out *Category4094953247Views) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(Category4094953247Views, 0, 8)
			} else {
				*out = Category4094953247Views{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v34 *Category4094953247View
			if in.IsNull() {
				in.Skip()
				v34 = nil
			} else {
				if v34 == nil {
					v34 = new(Category4094953247View)
				}
				(*v34).UnmarshalEasyJSON(in)
			}
			*out = append(*out, v34)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComMasseelchElkInternalUnitPetsEntHttp13(out *jwriter.Writer, in Category4094953247Views) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v35, v36 := range in {
			if v35 > 0 {
				out.RawByte(',')
			}
			if v36 == nil {
				out.RawString("null")
			} else {
				(*v36).MarshalEasyJSON(out)
			}
		}
		out.RawByte(']')
	}
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Category4094953247Views) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComMasseelchElkInternalUnitPetsEntHttp13(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Category4094953247Views) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComMasseelchElkInternalUnitPetsEntHttp13(l, v)
}
func easyjsonC5a4559bDecodeGithubComMasseelchElkInternalUnitPetsEntHttp14(in *jlexer.Lexer, out *Category4094953247View) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "name":
			out.Name = string(in.String())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComMasseelchElkInternalUnitPetsEntHttp14(out *jwriter.Writer, in Category4094953247View) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Category4094953247View) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComMasseelchElkInternalUnitPetsEntHttp14(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Category4094953247View) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComMasseelchElkInternalUnitPetsEntHttp14(l, v)
}
