// Code generated by entc, DO NOT EDIT.

package http

import (
	"net/http"
	"strconv"

	"github.com/mailru/easyjson"
	"github.com/masseelch/elk/internal/fridge/ent"
)

// Basic HTTP Error Response
type ErrResponse struct {
	Code   int         `json:"code"`             // http response status code
	Status string      `json:"status"`           // user-level status message
	Errors interface{} `json:"errors,omitempty"` // application-level error
}

func (e ErrResponse) MarshalToHTTPResponseWriter(w http.ResponseWriter) (int, error) {
	d, err := easyjson.Marshal(e)
	if err != nil {
		return 0, err
	}
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.Header().Set("Content-Length", strconv.Itoa(len(d)))
	w.WriteHeader(e.Code)
	return w.Write(d)
}

func BadRequest(w http.ResponseWriter, msg interface{}) (int, error) {
	return ErrResponse{
		Code:   http.StatusBadRequest,
		Status: http.StatusText(http.StatusBadRequest),
		Errors: msg,
	}.MarshalToHTTPResponseWriter(w)
}

func Conflict(w http.ResponseWriter, msg interface{}) (int, error) {
	return ErrResponse{
		Code:   http.StatusConflict,
		Status: http.StatusText(http.StatusConflict),
		Errors: msg,
	}.MarshalToHTTPResponseWriter(w)
}

func Forbidden(w http.ResponseWriter, msg interface{}) (int, error) {
	return ErrResponse{
		Code:   http.StatusForbidden,
		Status: http.StatusText(http.StatusForbidden),
		Errors: msg,
	}.MarshalToHTTPResponseWriter(w)
}

func InternalServerError(w http.ResponseWriter, msg interface{}) (int, error) {
	return ErrResponse{
		Code:   http.StatusInternalServerError,
		Status: http.StatusText(http.StatusInternalServerError),
		Errors: msg,
	}.MarshalToHTTPResponseWriter(w)
}

func NotFound(w http.ResponseWriter, msg interface{}) (int, error) {
	return ErrResponse{
		Code:   http.StatusNotFound,
		Status: http.StatusText(http.StatusNotFound),
		Errors: msg,
	}.MarshalToHTTPResponseWriter(w)
}

func Unauthorized(w http.ResponseWriter, msg interface{}) (int, error) {
	return ErrResponse{
		Code:   http.StatusUnauthorized,
		Status: http.StatusText(http.StatusUnauthorized),
		Errors: msg,
	}.MarshalToHTTPResponseWriter(w)
}

type (
	// CompartmentView represents the data serialized for the following serialization group combinations:
	// []
	CompartmentView struct {
		ID   int    `json:"id,omitempty"`
		Name string `json:"name,omitempty"`
	}
	CompartmentViews []*CompartmentView
)

func NewCompartmentView(e *ent.Compartment) *CompartmentView {
	if e == nil {
		return nil
	}
	return &CompartmentView{
		ID:   e.ID,
		Name: e.Name,
	}
}

func NewCompartmentViews(es []*ent.Compartment) CompartmentViews {
	if len(es) == 0 {
		return nil
	}
	r := make(CompartmentViews, len(es))
	for i, e := range es {
		r[i] = NewCompartmentView(e)
	}
	return r
}

type (
	// FridgeView represents the data serialized for the following serialization group combinations:
	// []
	FridgeView struct {
		ID    int    `json:"id,omitempty"`
		Title string `json:"title,omitempty"`
	}
	FridgeViews []*FridgeView
)

func NewFridgeView(e *ent.Fridge) *FridgeView {
	if e == nil {
		return nil
	}
	return &FridgeView{
		ID:    e.ID,
		Title: e.Title,
	}
}

func NewFridgeViews(es []*ent.Fridge) FridgeViews {
	if len(es) == 0 {
		return nil
	}
	r := make(FridgeViews, len(es))
	for i, e := range es {
		r[i] = NewFridgeView(e)
	}
	return r
}

type (
	// ItemView represents the data serialized for the following serialization group combinations:
	// []
	ItemView struct {
		ID   int    `json:"id,omitempty"`
		Name string `json:"name,omitempty"`
	}
	ItemViews []*ItemView
)

func NewItemView(e *ent.Item) *ItemView {
	if e == nil {
		return nil
	}
	return &ItemView{
		ID:   e.ID,
		Name: e.Name,
	}
}

func NewItemViews(es []*ent.Item) ItemViews {
	if len(es) == 0 {
		return nil
	}
	r := make(ItemViews, len(es))
	for i, e := range es {
		r[i] = NewItemView(e)
	}
	return r
}
